package fun

import (
	"fmt"
	"html"
	"strings"
	"unicode/utf8"

	"github.com/zxy248/nechego/handlers"
	tu "github.com/zxy248/nechego/teleutil"

	tele "gopkg.in/zxy248/telebot.v3"
)

type Name struct{}

func (h *Name) Match(c tele.Context) bool {
	return handlers.HasPrefix(c.Text(), "!–∏–º—è")
}

func (h *Name) Handle(c tele.Context) error {
	user := c.Sender()
	if reply := c.Message().ReplyTo; reply != nil {
		user = reply.Sender
	}

	name := getNameArgument(c.Text())
	if name == "" {
		// Check the user's name.
		prefix := "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
		if user.ID == c.Sender().ID {
			prefix = "–í–∞—à–µ –∏–º—è"
		}
		link := tu.Link(c, user)
		out := fmt.Sprintf("%s: <b>%s</b> üîñ", prefix, link)
		return c.Send(out, tele.ModeHTML)
	}

	if n := 16; utf8.RuneCountInString(name) > n {
		out := fmt.Sprintf("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ %d —Å–∏–º–≤–æ–ª–æ–≤.", n)
		return c.Send(out)
	}

	if user.ID == c.Bot().Me.ID {
		// Set the bot's name.
		payload := map[string]any{"name": name}
		if _, err := c.Bot().Raw("setMyName", payload); err != nil {
			return c.Send("‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.")
		}
		out := fmt.Sprintf("–¢–µ–ø–µ—Ä—å –º–µ–Ω—è –∑–æ–≤—É—Ç <b>%s</b> ‚úÖ", name)
		return c.Send(out, tele.ModeHTML)
	}

	// User must be an admin to have a name.
	if err := tu.Promote(c, tu.Member(c, user)); err != nil {
		return err
	}

	if err := c.Bot().SetAdminTitle(c.Chat(), user, name); err != nil {
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è.")
	}
	out := fmt.Sprintf("–ò–º—è <b>%s</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", name)
	return c.Send(out, tele.ModeHTML)
}

func getNameArgument(s string) string {
	trim := strings.TrimPrefix(s, "!–∏–º—è")
	if len(trim) == 0 || trim[0] != ' ' {
		return ""
	}
	return html.EscapeString(trim[1:])
}
